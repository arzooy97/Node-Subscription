<?php

/**
 * @file
 * Contains node_subscription.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Mail\MailManagerInterface;
use \Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use \Drupal\user\Entity\User;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_help().
 */
function node_subscription_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the node_subscription module.
    case 'help.page.node_subscription':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides a subscription block for node updates.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_mail().
 */
function node_subscription_mail($key, &$message, $params) {
  $options = [
    'langcode' => $message['langcode'],
  ];
  switch ($key) {
    case 'update_article':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('Someone has updated the article : @title', array('@title' => $params['node_title']), $options);
      $message['body'][] = $params['message'];
      break;
  }
}

/**
 * Implements hook_node_update().
 */
function node_subscription_node_update(NodeInterface $node) {
  
  $system_site_config = \Drupal::config('system.site');
  $mailManager = \Drupal::service('plugin.manager.mail');
  $module = 'node_subscription';
  $key = 'update_article';
  $params['message'] = t('The node is updated by some user. Please check it.');
  $params['node_title'] = $node->label();
  $langcode = \Drupal::currentUser()->getPreferredLangcode();
  $send = TRUE;
  

  //Retrieving data from node_subscription_storage entity
  $storage = \Drupal::entityTypeManager()->getStorage('node_subscription_storage');
  $uids = \Drupal::entityQuery('node_subscription_storage')
          ->execute();
  $users = $storage->loadMultiple($uids);

  $counter = 1;

  foreach ($users as $user) {
     $uid[$counter] = $user->get("field_userid")->getString();
     $nid[$counter] = $user->get("field_nodeid")->getString();
     $content_var[$counter] = $user->get("field_content")->value;
     $mail_to[$counter] = User::load($uid[$counter])->getEmail();
     $counter++;
     
    }
    
  while($counter > 1) {
    $counter--;

    if($nid[$counter] === $node->id() && $content_var[$counter] == 1)
    {
      $result = $mailManager->mail($module, $key, $mail_to[$counter], $langcode, $params, NULL, $send);
      if($result['result'] !== TRUE) {
        drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error');
      }
      else{
        drupal_set_message(t('Mail has been sent to subscribed users.'));
      }
    }
  }
}

/**
 * Implements hook_comment_insert().
 */
function node_subscription_comment_insert(EntityInterface $entity) {

  $node_id = $entity->get('entity_id')->target_id;
  $node = \Drupal\node\Entity\Node::load($node_id);
  $system_site_config = \Drupal::config('system.site');
  $mailManager = \Drupal::service('plugin.manager.mail');
  $module = 'node_subscription';
  $key = 'update_article';
  $params['message'] = t('The node is updated by some user. Please check it.');
  $params['node_title'] = $node->label();
  $langcode = \Drupal::currentUser()->getPreferredLangcode();
  $send = TRUE;

  $storage = \Drupal::entityTypeManager()->getStorage('node_subscription_storage');
  $uids = \Drupal::entityQuery('node_subscription_storage')
          ->execute();
  $users = $storage->loadMultiple($uids);

  $counter = 1;

  foreach ($users as $user) {
     $uid[$counter] = $user->get("field_userid")->getString();
     $nid[$counter] = $user->get("field_nodeid")->getString();
     $comment_var[$counter] = $user->get("field_comment")->value;
     $mail_to[$counter] = User::load($uid[$counter])->getEmail();
     
     $counter++;
  }

  while($counter > 1) {
    $counter--;
    if($nid[$counter] === $node_id && $comment_var[$counter] == 1) {
      $result = $mailManager->mail($module, $key, $mail_to[$counter], $langcode, $params, NULL, $send);
      if($result['result'] !== TRUE) {
        drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error');
      }
      else {
        drupal_set_message(t('Mail has been sent to subscribed users.'));
      }
    }
  }
}
?>
